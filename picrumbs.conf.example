; Station Info
[station]
; mycall: callsign-ssid
mycall = N0CALL-9

; 1200-baud TNC
[vhf_tnc]
; port: serial port the TNC is attached to
port = /dev/ttyS0
; kissport: for TNCs with multiple ports (first port is 0)
kissport = 0
; baud is serial line rate, not on-air rate
baud = 9600
; led_pin: gpio pin to use for status LED (green)
led_pin = 10
; led_pin2: gpio pin for red status LED 
; (optional even if led_pin is set, but does nothing if led_pin is not set)
led_pin2 = 11

; 300-baud TNC
[hf_tnc]
enable = false
port = /dev/ttyS2
kissport = 0
baud = 9600

; GPS (using GPSd)
[gps]
enable = true
; led_pin: gpio pin to use for status LED (green)
led_pin = 12
; led_pin2: gpio pin for red status LED 
; (optional even if led_pin is set, but does nothing if led_pin is not set)
led_pin2 = -13

; Radio CAT control settings
[radio]
enable = false
port = /dev/ttyS3
baud = 38400
; model: see the HamLib website to find yours.
model = 122
; retune: set to true to return to the user-set frequency and mode after beaconing
retune = false

; Console Serial Port
[console]
enable = false
port = /dev/ttyS4
baud = 115200

; GPIO Settings
[gpio]
; wiringPi numbering, negative for active low
; expander: set to enable a GPIO expander.
; more info: http://wiringpi.com/extensions/i2c-mcp23008-mcp23017/
; 0 = MCP23008, 1 = MCP23017
; expander = 1
; expander_addr: I2C address of the expander, in hex
expander_addr = 20
; expander_pinbase: pin number offset for the expander pins
; must be greater than 64. add to gpio pin numbers to use the expander
expander_pinbase = 100
; psk_ptt: gpio pin to use for PTT while transmitting PSK63
psk_ptt_pin = -7

; Beacon Params:
[beacon]
; compressed: compress beacon to save on-air bandwidth and increase reliability
compressed = false
; symbol table: / or \, see http://wa8lmf.net/aprs/APRS_symbols.htm
symbol_table = /
; symbol: symbol char from table
symbol = -
; comment: keep this short to save on-air bandwidth and increase reliabiltiy
; comments can contain any printable characters except ~ and |
; you can add tags to include extra information:
;	~a0..~a7 = scaled ADC value
;	~t = temperature sensor value
;	~r0..~r7 = raw ADC value
;	~z = timestamp (zulu)
comment = PiCrumbs
; static_rate: seconds between beacons, 0 to use SmartBeaconing
static_rate = 0
; SmartBeaconing params, see http://info.aprs.net/index.php?title=SmartBeaconing
; these defaults should be reasonable for a vehicle based tracker
sb_low_speed = 5
sb_low_rate = 900
sb_high_speed = 60
sb_high_rate = 180
sb_turn_min = 30
sb_turn_time = 15
sb_turn_slope = 255
; send_speed, send_course, send_alt: send course, speed, or altitude with position
; default is none for uncompressed packet, course and speed for compressed packet.
; compressed packet cannot send course or speed if altitude is enabled.
send_speed = true
send_course = true
send_alt = false
; status: text to send in status report (default blank)
; same format as comments
; status = ~zPiCrumbs
; status_rate: how often to send status reports, in seconds.
; zero to disable (default)
status_rate = 0
; status_path: which path to use for status reports
status_path = 1
; temp_file: path to file containing a temperature value in millicelsius.
; temp_file = /sys/class/hwmon/hwmon0/temp1_input
; temp_unit: temperature unit. C=Celsius, F=Fahrenheit, K=Kelvin
temp_unit = C
; temp_precision: number of digits to show after the decimal position
; default is 0
temp_precision = 0
; status LED, same as GPS LED.
; led_pin =
; led_pin2 =

[adc0]
; ADCs - max of 8 (adc0-adc7)
; value can be reported in beacon messages
; file: path to a file containing the ADC's raw value (disabled if not defined)
; file =  /sys/bus/iio/devices/iio:device0/in_voltage0_raw
; scale: ADC value will be multiplied by this value to get a voltage reading
scale = 0.01

[predict]
; PiCrumbs uses PREDICT to check satellite elevation.
; https://www.qsl.net/kd2bd/predict.html
; PREDICT binary path, leave blank to disable
; path = /usr/local/bin/predict
; tlefile: path to where PREDICT can find TLE satellite info
; default is ~/.predict/predict.tle
tlefile = /etc/predict.tle

; APRS-IS settings
[aprsis]
enable = false
; server: name or ip address of an aprs-is server that supports http
server = rotate.aprs2.net
; port: http port of this server, usually 8080.
port = 8080
; proxy: http proxy server to use for aprs-is, blank to disable
proxy =
; proxy_port: port number to use for the proxy
proxy_port = 1080
; user: usually the same as mycall
user = N0CALL-9
; pass: aprs-is password for this callsign
pass = -1

; Smart Frequency Hopping:
;
; you can specify multiple [path*] sections here. each will be tried, in order.
; if your station is not repeated by a digi, the next path will be tried.
; only the last path should be used for HF, as there is no way to know if a HF path worked.
; you can also specify an internet path to use with a tethered cell phone, etc.
; if the aprs servers cannot be contacted, we will move on to the next path.

[path1]
; name: name to be shown for path stats. default is the path section name
name = VHF
; freq: frequency to use for this APRS path, in Hz
freq = 144390000
; mode: hamlib mode name to use for this path, eg. FM, USB, LSB, PKTFM
mode = FM
; sat: check with PREDICT to see if this satellite is overhead for this path
; leave this blank to disable this check
sat = 
; min_ele: don't bother trying this sat if it isn't above this elevation
min_ele = 0
; proto: 0 for 1200 baud, 1 for 300 baud, 2 for aprs-is, 3 for psk63, 4 to alternate between psk and 300 baud
; this is the only path setting that is required
proto = 0
; retry: try a second time to send a packet on this path if a digi is not heard
retry = true
; via: max of 8, PLEASE Google this subject before changing if you don't fully understand the effects.
via = WIDE1-1,WIDE2-1
; holdoff: limit use of this path to at least this interval, in seconds.
holdoff = 10
; comment: if included, this replaces the default beacon comment text for this path only
; see beacon section for more details
comment = 2M Path
; enablepin: GPIO pin (wiringPi numbering) to check to see if this path is enabled
; this could be hooked up to a switch, for example. negative pin number means active low
; if not set, gpio will not be checked
enablepin = 6
; pullup: set to true to enable the internal pullup on the enable gpio pin
pullup = true

[path2]
; aprs-is path
proto = 2

[path3]
; 30m hf 300bd/psk63 path
freq = 10147600
mode = USB
proto = 4
enablepin = 5
pullup = true
; no comment here, to increase chances of getting through
comment =
; See here for PSK63 info: http://wa8lmf.net/APRS_PSK63/
; psk_freq: psk63 audio frequency (in Hz)
psk_freq = 2100
; psk_vol: psk63 volume (percent)
psk_vol = 100
